#include "deck.h"
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
#include <iostream>
//Note that this class does not include what suit a card is, only its value or ranking. This is because suits don't matter in Blackjack
Deck::Deck()
{
    shuffle();
}

void Deck::shuffle() {

    std::cout << "\nshuffling!\n";
    //empty the deck
    deck.clear();
    char values[] = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'};
    //Loop for each deck in play
    for (int i = 0; i < deckCount; i++) {
        //loop for the 13 ranks/values of cards
        for (int j = 0; j < 13; j++) {
            //loop for the 4 cards of each type that exist in 1 deck (ex 4 kings in a deck)
            for (int l = 0; l < 4; l++) {
                deck.push_back(values[j]);
            }
        }
    }

    //randomly shuffle the deck, using a seed generated by the system time
    //This is not a perfectly random method, but since this game is not played for money, it will suffice
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::default_random_engine rng(seed);
    std::shuffle(deck.begin(), deck.end(), rng);
}

void Deck::shuffleCheck() {
    if (deck.size() <= shuffleThreshold) {
        shuffle();
    }
}

int Deck::getDeckCount() {
    return deckCount;
}

char Deck::getNextCard() {
    char c = deck[deck.size() - 1];
    deck.pop_back();
    return c;
}

